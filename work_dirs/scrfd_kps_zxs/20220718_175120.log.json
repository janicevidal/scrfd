{"env_info": "sys.platform: linux\nPython: 3.7.8 (default, Apr 14 2021, 11:08:37) [GCC 6.3.0 20170516]\nCUDA available: True\nGPU 0: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.1.TC455_06.29069683_0\nGCC: gcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\nPyTorch: 1.8.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.1+cu111\nOpenCV: 4.5.1\nMMCV: 1.2.6\nMMCV Compiler: GCC 6.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.7.0+f1427df", "config": "optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_mult = 8\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=0.001,\n    step=[440, 544])\ntotal_epochs = 640\ncheckpoint_config = dict(interval=80)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'RetinaFaceDataset'\ndata_root = 'data/retinaface/'\ntrain_root = 'data/retinaface/train/'\nval_root = 'data/retinaface/val/'\nimg_norm_cfg = dict(\n    mean=[127.5, 127.5, 127.5], std=[128.0, 128.0, 128.0], to_rgb=True)\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=0,\n    train=dict(\n        type='RetinaFaceDataset',\n        ann_file='/mnt/zhangxs/retinaface/train/labelv2.txt',\n        img_prefix='/mnt/zhangxs/retinaface/train/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n            dict(\n                type='RandomSquareCrop',\n                crop_choice=[0.3, 0.45, 0.6, 0.8, 1.0]),\n            dict(type='Resize', img_scale=(320, 320), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='PhotoMetricDistortion',\n                brightness_delta=32,\n                contrast_range=(0.5, 1.5),\n                saturation_range=(0.5, 1.5),\n                hue_delta=18),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_keypointss'\n                ])\n        ]),\n    val=dict(\n        type='RetinaFaceDataset',\n        ann_file='/mnt/zhangxs/retinaface/val/labelv2.txt',\n        img_prefix='/mnt/zhangxs/retinaface/val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(320, 320),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(320, 320), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='RetinaFaceDataset',\n        ann_file='data/retinaface/val/labelv2.txt',\n        img_prefix='data/retinaface/val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(320, 320),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(320, 320), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='SCRFD',\n    backbone=dict(\n        type='SandNet',\n        block_cfg=dict(midchannel=[32, 32, 32], depth=[3, 5, 3])),\n    neck=dict(\n        type='GhostPAN',\n        in_channels=[96, 128, 128],\n        out_channels=32,\n        kernel_size=5,\n        num_extra_level=0,\n        use_depthwise=True,\n        activation='LeakyReLU',\n        upsample_cfg=dict(scale_factor=2, mode='nearest')),\n    bbox_head=dict(\n        type='SCRFDHead',\n        num_classes=1,\n        in_channels=32,\n        stacked_convs=2,\n        feat_channels=64,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        cls_reg_share=True,\n        strides_share=False,\n        dw_conv=True,\n        scale_mode=0,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            scales=[1, 2],\n            base_sizes=[16, 64, 256],\n            strides=[8, 16, 32]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=False,\n        reg_max=8,\n        loss_bbox=dict(type='DIoULoss', loss_weight=2.0),\n        use_kps=True,\n        loss_kps=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=0.1),\n        train_cfg=dict(\n            assigner=dict(type='ATSSAssigner', topk=9),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        test_cfg=dict(\n            nms_pre=-1,\n            min_bbox_size=0,\n            score_thr=0.02,\n            nms=dict(type='nms', iou_threshold=0.45),\n            max_per_img=-1)))\ntrain_cfg = dict(\n    assigner=dict(type='ATSSAssigner', topk=9),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=-1,\n    min_bbox_size=0,\n    score_thr=0.02,\n    nms=dict(type='nms', iou_threshold=0.45),\n    max_per_img=-1)\nepoch_multi = 1\nevaluation = dict(interval=80, metric='mAP')\nwork_dir = './work_dirs/scrfd_kps_zxs'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "scrfd_kps_zxs.py"}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00067, "memory": 716, "data_time": 1.82827, "loss_cls": 0.04119, "loss_bbox": 1.92905, "loss_kps": 0.6861, "loss": 2.65634, "time": 2.13591}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00134, "memory": 725, "data_time": 1.7375, "loss_cls": 0.1017, "loss_bbox": 1.58529, "loss_kps": 0.50559, "loss": 2.19259, "time": 2.0324}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.002, "memory": 730, "data_time": 1.70089, "loss_cls": 0.16183, "loss_bbox": 1.29394, "loss_kps": 0.48431, "loss": 1.94009, "time": 1.99166}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00267, "memory": 730, "data_time": 1.74182, "loss_cls": 0.28831, "loss_bbox": 1.13514, "loss_kps": 0.50008, "loss": 1.92353, "time": 2.04638}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00333, "memory": 1045, "data_time": 1.69788, "loss_cls": 0.2872, "loss_bbox": 1.12872, "loss_kps": 0.48931, "loss": 1.90524, "time": 2.01354}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.004, "memory": 1045, "data_time": 1.67815, "loss_cls": 0.29079, "loss_bbox": 1.12138, "loss_kps": 0.46879, "loss": 1.88096, "time": 1.98025}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00467, "memory": 1045, "data_time": 1.6805, "loss_cls": 0.2946, "loss_bbox": 1.10707, "loss_kps": 0.48068, "loss": 1.88235, "time": 1.97638}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00533, "memory": 1045, "data_time": 1.71766, "loss_cls": 0.2989, "loss_bbox": 1.0876, "loss_kps": 0.48867, "loss": 1.87517, "time": 2.01643}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00604, "memory": 1045, "data_time": 1.73961, "loss_cls": 0.35626, "loss_bbox": 1.05117, "loss_kps": 0.525, "loss": 1.93243, "time": 2.04496}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0067, "memory": 1045, "data_time": 1.65187, "loss_cls": 0.36337, "loss_bbox": 1.03063, "loss_kps": 0.52805, "loss": 1.92205, "time": 1.94345}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00737, "memory": 1045, "data_time": 1.68225, "loss_cls": 0.35755, "loss_bbox": 1.01924, "loss_kps": 0.53136, "loss": 1.90814, "time": 1.97663}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00804, "memory": 1045, "data_time": 1.65896, "loss_cls": 0.38203, "loss_bbox": 0.98459, "loss_kps": 0.51312, "loss": 1.87973, "time": 1.9482}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.0087, "memory": 1045, "data_time": 1.66334, "loss_cls": 0.42173, "loss_bbox": 0.93887, "loss_kps": 0.53739, "loss": 1.89799, "time": 1.96174}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.00937, "memory": 1045, "data_time": 1.65771, "loss_cls": 0.4059, "loss_bbox": 0.91447, "loss_kps": 0.53537, "loss": 1.85575, "time": 1.95377}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.01, "memory": 1045, "data_time": 1.69544, "loss_cls": 0.41865, "loss_bbox": 0.88479, "loss_kps": 0.52608, "loss": 1.82952, "time": 1.9833}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.01, "memory": 1045, "data_time": 1.67569, "loss_cls": 0.40935, "loss_bbox": 0.88373, "loss_kps": 0.53312, "loss": 1.8262, "time": 1.98178}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01, "memory": 1045, "data_time": 1.75667, "loss_cls": 0.41165, "loss_bbox": 0.84725, "loss_kps": 0.49873, "loss": 1.75762, "time": 2.05923}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.01, "memory": 1045, "data_time": 1.67126, "loss_cls": 0.39016, "loss_bbox": 0.84371, "loss_kps": 0.46214, "loss": 1.69601, "time": 1.97166}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.01, "memory": 1045, "data_time": 1.69472, "loss_cls": 0.39213, "loss_bbox": 0.82286, "loss_kps": 0.47062, "loss": 1.68562, "time": 2.00214}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.01, "memory": 1045, "data_time": 1.66554, "loss_cls": 0.3961, "loss_bbox": 0.79006, "loss_kps": 0.45903, "loss": 1.64519, "time": 1.95637}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.01, "memory": 1045, "data_time": 1.67588, "loss_cls": 0.39005, "loss_bbox": 0.78291, "loss_kps": 0.43996, "loss": 1.61292, "time": 1.97742}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.01, "memory": 1045, "data_time": 1.67629, "loss_cls": 0.39101, "loss_bbox": 0.76824, "loss_kps": 0.45016, "loss": 1.60941, "time": 1.97231}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.01, "memory": 1045, "data_time": 1.67841, "loss_cls": 0.39615, "loss_bbox": 0.73952, "loss_kps": 0.42037, "loss": 1.55604, "time": 1.97711}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.01, "memory": 1045, "data_time": 1.66322, "loss_cls": 0.38592, "loss_bbox": 0.74816, "loss_kps": 0.40637, "loss": 1.54046, "time": 1.96029}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.01, "memory": 1045, "data_time": 1.69604, "loss_cls": 0.37762, "loss_bbox": 0.72847, "loss_kps": 0.42292, "loss": 1.52901, "time": 1.98416}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.01, "memory": 1045, "data_time": 1.65271, "loss_cls": 0.37931, "loss_bbox": 0.71773, "loss_kps": 0.40616, "loss": 1.5032, "time": 1.94446}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.01, "memory": 1045, "data_time": 1.67196, "loss_cls": 0.37543, "loss_bbox": 0.70475, "loss_kps": 0.38107, "loss": 1.46126, "time": 1.9599}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.01, "memory": 1045, "data_time": 1.68104, "loss_cls": 0.36488, "loss_bbox": 0.72123, "loss_kps": 0.36536, "loss": 1.45147, "time": 1.97625}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 0.01, "memory": 1045, "data_time": 1.71862, "loss_cls": 0.3534, "loss_bbox": 0.70086, "loss_kps": 0.36268, "loss": 1.41694, "time": 2.01393}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.01, "memory": 1045, "data_time": 1.6886, "loss_cls": 0.37106, "loss_bbox": 0.677, "loss_kps": 0.34722, "loss": 1.39528, "time": 1.98533}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.01, "memory": 1045, "data_time": 1.67336, "loss_cls": 0.36557, "loss_bbox": 0.69562, "loss_kps": 0.36277, "loss": 1.42396, "time": 1.95455}
{"mode": "train", "epoch": 4, "iter": 800, "lr": 0.01, "memory": 1045, "data_time": 1.65683, "loss_cls": 0.35607, "loss_bbox": 0.6716, "loss_kps": 0.36122, "loss": 1.38889, "time": 1.93845}
