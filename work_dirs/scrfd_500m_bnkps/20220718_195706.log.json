{"env_info": "sys.platform: linux\nPython: 3.7.8 (default, Apr 14 2021, 11:08:37) [GCC 6.3.0 20170516]\nCUDA available: True\nGPU 0: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.1.TC455_06.29069683_0\nGCC: gcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\nPyTorch: 1.8.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.1+cu111\nOpenCV: 4.5.1\nMMCV: 1.2.6\nMMCV Compiler: GCC 6.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.7.0+29db161", "config": "optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_mult = 2\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.001,\n    step=[110, 136])\ntotal_epochs = 160\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=20,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'RetinaFaceDataset'\ndata_root = 'data/retinaface/'\ntrain_root = 'data/retinaface/train/'\nval_root = 'data/retinaface/val/'\nimg_norm_cfg = dict(\n    mean=[127.5, 127.5, 127.5], std=[128.0, 128.0, 128.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n    dict(\n        type='RandomSquareCrop',\n        crop_choice=[0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0]),\n    dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='PhotoMetricDistortion',\n        brightness_delta=32,\n        contrast_range=(0.5, 1.5),\n        saturation_range=(0.5, 1.5),\n        hue_delta=18),\n    dict(\n        type='Normalize',\n        mean=[127.5, 127.5, 127.5],\n        std=[128.0, 128.0, 128.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_keypointss'\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(640, 640),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='Pad', size=(640, 640), pad_val=0),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=64,\n    workers_per_gpu=8,\n    train=dict(\n        type='RetinaFaceDataset',\n        ann_file='/mnt/zhangxs/retinaface/train/labelv2.txt',\n        img_prefix='/mnt/zhangxs/retinaface/train/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n            dict(\n                type='RandomSquareCrop',\n                crop_choice=[\n                    0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0\n                ]),\n            dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='PhotoMetricDistortion',\n                brightness_delta=32,\n                contrast_range=(0.5, 1.5),\n                saturation_range=(0.5, 1.5),\n                hue_delta=18),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_keypointss'\n                ])\n        ]),\n    val=dict(\n        type='RetinaFaceDataset',\n        ann_file='/mnt/zhangxs/retinaface/val/labelv2.txt',\n        img_prefix='/mnt/zhangxs/retinaface/val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='RetinaFaceDataset',\n        ann_file='/mnt/zhangxs/retinaface/val/labelv2.txt',\n        img_prefix='/mnt/zhangxs/retinaface/val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='SCRFD',\n    backbone=dict(\n        type='MobileNetV1',\n        block_cfg=dict(\n            stage_blocks=(2, 3, 2, 6), stage_planes=[16, 16, 40, 72, 152,\n                                                     288])),\n    neck=dict(\n        type='PAFPN',\n        in_channels=[40, 72, 152, 288],\n        out_channels=16,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=3),\n    bbox_head=dict(\n        type='SCRFDHead',\n        num_classes=1,\n        in_channels=16,\n        stacked_convs=2,\n        feat_channels=64,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        cls_reg_share=True,\n        strides_share=False,\n        dw_conv=True,\n        scale_mode=0,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            scales=[1, 2],\n            base_sizes=[16, 64, 256],\n            strides=[8, 16, 32]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=False,\n        reg_max=8,\n        loss_bbox=dict(type='DIoULoss', loss_weight=2.0),\n        use_kps=True,\n        loss_kps=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=0.1),\n        train_cfg=dict(\n            assigner=dict(type='ATSSAssigner', topk=9),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        test_cfg=dict(\n            nms_pre=-1,\n            min_bbox_size=0,\n            score_thr=0.02,\n            nms=dict(type='nms', iou_threshold=0.45),\n            max_per_img=-1)))\ntrain_cfg = dict(\n    assigner=dict(type='ATSSAssigner', topk=9),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=-1,\n    min_bbox_size=0,\n    score_thr=0.02,\n    nms=dict(type='nms', iou_threshold=0.45),\n    max_per_img=-1)\nepoch_multi = 1\nevaluation = dict(interval=5, metric='mAP')\nwork_dir = './work_dirs/scrfd_500m_bnkps'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "scrfd_500m_bnkps.py"}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0002, "memory": 8061, "data_time": 13.01619, "loss_cls": 0.00857, "loss_bbox": 2.03065, "loss_kps": 0.66381, "loss": 2.70303, "time": 14.93652}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.0004, "memory": 8847, "data_time": 0.2753, "loss_cls": 0.05866, "loss_bbox": 1.86415, "loss_kps": 0.60527, "loss": 2.52809, "time": 1.9508}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.0006, "memory": 8847, "data_time": 0.28115, "loss_cls": 0.12862, "loss_bbox": 1.63149, "loss_kps": 0.57855, "loss": 2.33867, "time": 1.97882}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 0.0008, "memory": 8847, "data_time": 0.27344, "loss_cls": 0.22249, "loss_bbox": 1.35983, "loss_kps": 0.43847, "loss": 2.02079, "time": 2.10555}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.001, "memory": 8847, "data_time": 0.44508, "loss_cls": 0.21833, "loss_bbox": 1.25392, "loss_kps": 0.42152, "loss": 1.89376, "time": 2.65356}
{"mode": "train", "epoch": 1, "iter": 120, "lr": 0.0012, "memory": 8847, "data_time": 1.18462, "loss_cls": 0.24199, "loss_bbox": 1.25214, "loss_kps": 0.45338, "loss": 1.9475, "time": 3.65563}
{"mode": "train", "epoch": 1, "iter": 140, "lr": 0.0014, "memory": 8894, "data_time": 0.56837, "loss_cls": 0.26614, "loss_bbox": 1.21214, "loss_kps": 0.42278, "loss": 1.90105, "time": 3.09637}
{"mode": "train", "epoch": 1, "iter": 160, "lr": 0.0016, "memory": 8894, "data_time": 0.4347, "loss_cls": 0.29461, "loss_bbox": 1.14756, "loss_kps": 0.43531, "loss": 1.87748, "time": 2.37375}
{"mode": "train", "epoch": 1, "iter": 180, "lr": 0.0018, "memory": 8894, "data_time": 0.34227, "loss_cls": 0.29941, "loss_bbox": 1.15349, "loss_kps": 0.41993, "loss": 1.87283, "time": 2.53857}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.002, "memory": 8894, "data_time": 0.20083, "loss_cls": 0.3086, "loss_bbox": 1.14344, "loss_kps": 0.43878, "loss": 1.89082, "time": 1.59835}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.00222, "memory": 8894, "data_time": 9.28443, "loss_cls": 0.29169, "loss_bbox": 1.16168, "loss_kps": 0.41498, "loss": 1.86835, "time": 10.67943}
{"mode": "train", "epoch": 2, "iter": 40, "lr": 0.00242, "memory": 8894, "data_time": 0.62019, "loss_cls": 0.29175, "loss_bbox": 1.15786, "loss_kps": 0.40566, "loss": 1.85527, "time": 2.17241}
{"mode": "train", "epoch": 2, "iter": 60, "lr": 0.00262, "memory": 8894, "data_time": 1.06229, "loss_cls": 0.30862, "loss_bbox": 1.13272, "loss_kps": 0.44357, "loss": 1.88491, "time": 3.08854}
{"mode": "train", "epoch": 2, "iter": 80, "lr": 0.00282, "memory": 8894, "data_time": 1.42794, "loss_cls": 0.31944, "loss_bbox": 1.12503, "loss_kps": 0.42784, "loss": 1.87232, "time": 3.74008}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00302, "memory": 8894, "data_time": 0.34873, "loss_cls": 0.30183, "loss_bbox": 1.13611, "loss_kps": 0.43815, "loss": 1.87609, "time": 2.58247}
{"mode": "train", "epoch": 2, "iter": 120, "lr": 0.00322, "memory": 8894, "data_time": 0.38514, "loss_cls": 0.31901, "loss_bbox": 1.12066, "loss_kps": 0.41057, "loss": 1.85025, "time": 2.36167}
{"mode": "train", "epoch": 2, "iter": 140, "lr": 0.00342, "memory": 8894, "data_time": 0.42742, "loss_cls": 0.30564, "loss_bbox": 1.12661, "loss_kps": 0.42482, "loss": 1.85707, "time": 2.89012}
{"mode": "train", "epoch": 2, "iter": 160, "lr": 0.00362, "memory": 8894, "data_time": 0.38412, "loss_cls": 0.31548, "loss_bbox": 1.12627, "loss_kps": 0.42713, "loss": 1.86888, "time": 2.49899}
{"mode": "train", "epoch": 2, "iter": 180, "lr": 0.00382, "memory": 8894, "data_time": 0.30814, "loss_cls": 0.31281, "loss_bbox": 1.10882, "loss_kps": 0.4418, "loss": 1.86343, "time": 1.80403}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00402, "memory": 8894, "data_time": 0.23184, "loss_cls": 0.30221, "loss_bbox": 1.12858, "loss_kps": 0.4111, "loss": 1.84189, "time": 1.50955}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.00424, "memory": 8894, "data_time": 11.88684, "loss_cls": 0.3109, "loss_bbox": 1.11635, "loss_kps": 0.40884, "loss": 1.83609, "time": 13.9842}
{"mode": "train", "epoch": 3, "iter": 40, "lr": 0.00444, "memory": 8894, "data_time": 0.75586, "loss_cls": 0.29891, "loss_bbox": 1.12346, "loss_kps": 0.42579, "loss": 1.84817, "time": 2.86456}
{"mode": "train", "epoch": 3, "iter": 60, "lr": 0.00464, "memory": 8894, "data_time": 0.4215, "loss_cls": 0.30824, "loss_bbox": 1.09884, "loss_kps": 0.44407, "loss": 1.85115, "time": 2.39538}
{"mode": "train", "epoch": 3, "iter": 80, "lr": 0.00484, "memory": 8894, "data_time": 0.23175, "loss_cls": 0.30864, "loss_bbox": 1.10369, "loss_kps": 0.41578, "loss": 1.82812, "time": 1.69018}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00503, "memory": 8894, "data_time": 0.30862, "loss_cls": 0.30384, "loss_bbox": 1.1065, "loss_kps": 0.41554, "loss": 1.82587, "time": 1.46802}
{"mode": "train", "epoch": 3, "iter": 120, "lr": 0.00523, "memory": 8894, "data_time": 0.28801, "loss_cls": 0.30527, "loss_bbox": 1.09809, "loss_kps": 0.40863, "loss": 1.81199, "time": 1.82257}
{"mode": "train", "epoch": 3, "iter": 140, "lr": 0.00543, "memory": 8894, "data_time": 0.29525, "loss_cls": 0.30938, "loss_bbox": 1.08741, "loss_kps": 0.41273, "loss": 1.80951, "time": 1.80673}
{"mode": "train", "epoch": 3, "iter": 160, "lr": 0.00563, "memory": 8894, "data_time": 0.24817, "loss_cls": 0.30244, "loss_bbox": 1.09996, "loss_kps": 0.43979, "loss": 1.84219, "time": 1.73236}
{"mode": "train", "epoch": 3, "iter": 180, "lr": 0.00583, "memory": 8894, "data_time": 0.26535, "loss_cls": 0.31036, "loss_bbox": 1.10016, "loss_kps": 0.37404, "loss": 1.78456, "time": 1.79517}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00603, "memory": 8894, "data_time": 0.2607, "loss_cls": 0.31788, "loss_bbox": 1.06616, "loss_kps": 0.41527, "loss": 1.79932, "time": 1.72321}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.00625, "memory": 8894, "data_time": 12.33846, "loss_cls": 0.30593, "loss_bbox": 1.09643, "loss_kps": 0.39414, "loss": 1.79651, "time": 13.86942}
{"mode": "train", "epoch": 4, "iter": 40, "lr": 0.00645, "memory": 8894, "data_time": 0.26384, "loss_cls": 0.30007, "loss_bbox": 1.11344, "loss_kps": 0.38828, "loss": 1.80179, "time": 1.89248}
{"mode": "train", "epoch": 4, "iter": 60, "lr": 0.00665, "memory": 8894, "data_time": 0.26987, "loss_cls": 0.31658, "loss_bbox": 1.07984, "loss_kps": 0.40145, "loss": 1.79787, "time": 1.81311}
{"mode": "train", "epoch": 4, "iter": 80, "lr": 0.00685, "memory": 8894, "data_time": 0.25696, "loss_cls": 0.30884, "loss_bbox": 1.08447, "loss_kps": 0.40624, "loss": 1.79955, "time": 1.78219}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00705, "memory": 8894, "data_time": 0.258, "loss_cls": 0.30948, "loss_bbox": 1.05399, "loss_kps": 0.43311, "loss": 1.79658, "time": 1.57856}
{"mode": "train", "epoch": 4, "iter": 120, "lr": 0.00725, "memory": 8894, "data_time": 0.28882, "loss_cls": 0.31864, "loss_bbox": 1.01896, "loss_kps": 0.43884, "loss": 1.77644, "time": 1.6869}
{"mode": "train", "epoch": 4, "iter": 140, "lr": 0.00745, "memory": 8894, "data_time": 0.27092, "loss_cls": 0.31637, "loss_bbox": 1.05612, "loss_kps": 0.38566, "loss": 1.75815, "time": 1.83657}
{"mode": "train", "epoch": 4, "iter": 160, "lr": 0.00765, "memory": 8894, "data_time": 0.43292, "loss_cls": 0.31758, "loss_bbox": 1.04803, "loss_kps": 0.38811, "loss": 1.75372, "time": 2.57171}
{"mode": "train", "epoch": 4, "iter": 180, "lr": 0.00785, "memory": 8894, "data_time": 0.39993, "loss_cls": 0.32776, "loss_bbox": 1.03499, "loss_kps": 0.3992, "loss": 1.76195, "time": 2.90608}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.00805, "memory": 8894, "data_time": 0.41887, "loss_cls": 0.33803, "loss_bbox": 1.02883, "loss_kps": 0.39413, "loss": 1.76099, "time": 2.29372}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.00827, "memory": 8894, "data_time": 8.90716, "loss_cls": 0.33711, "loss_bbox": 1.00799, "loss_kps": 0.44047, "loss": 1.78556, "time": 10.53851}
{"mode": "train", "epoch": 5, "iter": 40, "lr": 0.00847, "memory": 8894, "data_time": 0.31746, "loss_cls": 0.32947, "loss_bbox": 1.01554, "loss_kps": 0.36395, "loss": 1.70895, "time": 1.82244}
{"mode": "train", "epoch": 5, "iter": 60, "lr": 0.00867, "memory": 8894, "data_time": 0.28892, "loss_cls": 0.31598, "loss_bbox": 1.03564, "loss_kps": 0.39462, "loss": 1.74624, "time": 1.89493}
{"mode": "train", "epoch": 5, "iter": 80, "lr": 0.00887, "memory": 8894, "data_time": 0.29515, "loss_cls": 0.30366, "loss_bbox": 1.03936, "loss_kps": 0.38617, "loss": 1.72918, "time": 1.85491}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.00907, "memory": 8894, "data_time": 0.34197, "loss_cls": 0.3149, "loss_bbox": 1.03086, "loss_kps": 0.37146, "loss": 1.71721, "time": 2.14065}
{"mode": "train", "epoch": 5, "iter": 120, "lr": 0.00927, "memory": 8894, "data_time": 0.36447, "loss_cls": 0.34466, "loss_bbox": 0.95945, "loss_kps": 0.37877, "loss": 1.68288, "time": 2.0053}
{"mode": "train", "epoch": 5, "iter": 140, "lr": 0.00947, "memory": 9027, "data_time": 0.85257, "loss_cls": 0.32346, "loss_bbox": 1.01919, "loss_kps": 0.35892, "loss": 1.70157, "time": 2.47918}
{"mode": "train", "epoch": 5, "iter": 160, "lr": 0.00967, "memory": 9027, "data_time": 2.40406, "loss_cls": 0.31531, "loss_bbox": 0.98789, "loss_kps": 0.36734, "loss": 1.67054, "time": 4.3791}
{"mode": "train", "epoch": 5, "iter": 180, "lr": 0.00987, "memory": 9027, "data_time": 1.71225, "loss_cls": 0.31524, "loss_bbox": 0.97259, "loss_kps": 0.39636, "loss": 1.68419, "time": 3.67869}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.01, "memory": 9027, "data_time": 0.28266, "loss_cls": 0.32996, "loss_bbox": 1.03065, "loss_kps": 0.35064, "loss": 1.71125, "time": 2.11481}
