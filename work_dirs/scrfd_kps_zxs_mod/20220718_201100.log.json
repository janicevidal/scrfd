{"env_info": "sys.platform: linux\nPython: 3.7.8 (default, Apr 14 2021, 11:08:37) [GCC 6.3.0 20170516]\nCUDA available: True\nGPU 0: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.1.TC455_06.29069683_0\nGCC: gcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\nPyTorch: 1.8.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.1+cu111\nOpenCV: 4.5.1\nMMCV: 1.2.6\nMMCV Compiler: GCC 6.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.7.0+02d7085", "config": "optimizer = dict(type='AdamW', lr=0.001)\noptimizer_config = dict(grad_clip=None)\nlr_mult = 2\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=300,\n    warmup_ratio=0.001,\n    step=[110, 136])\ntotal_epochs = 160\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=20,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'RetinaFaceDataset'\ndata_root = 'data/retinaface/'\ntrain_root = 'data/retinaface/train/'\nval_root = 'data/retinaface/val/'\nimg_norm_cfg = dict(\n    mean=[127.5, 127.5, 127.5], std=[128.0, 128.0, 128.0], to_rgb=True)\ndata = dict(\n    samples_per_gpu=128,\n    workers_per_gpu=8,\n    train=dict(\n        type='RetinaFaceDataset',\n        ann_file='/mnt/zhangxs/retinaface/train/labelv2.txt',\n        img_prefix='/mnt/zhangxs/retinaface/train/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n            dict(\n                type='RandomSquareCrop',\n                crop_choice=[0.3, 0.45, 0.6, 0.8, 1.0]),\n            dict(type='Resize', img_scale=(320, 320), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='PhotoMetricDistortion',\n                brightness_delta=32,\n                contrast_range=(0.5, 1.5),\n                saturation_range=(0.5, 1.5),\n                hue_delta=18),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_keypointss'\n                ])\n        ]),\n    val=dict(\n        type='RetinaFaceDataset',\n        ann_file='/mnt/zhangxs/retinaface/val/labelv2.txt',\n        img_prefix='/mnt/zhangxs/retinaface/val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(320, 320),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(320, 320), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='RetinaFaceDataset',\n        ann_file='/mnt/zhangxs/retinaface/val/labelv2.txt',\n        img_prefix='/mnt/zhangxs/retinaface/val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(320, 320),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(320, 320), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='SCRFD',\n    backbone=dict(\n        type='SandNet',\n        block_cfg=dict(midchannel=[32, 32, 32], depth=[3, 5, 3])),\n    neck=dict(\n        type='GhostPAN',\n        in_channels=[96, 128, 128],\n        out_channels=32,\n        kernel_size=3,\n        num_extra_level=0,\n        use_depthwise=True,\n        activation='ReLU',\n        upsample_cfg=dict(scale_factor=2, mode='nearest')),\n    bbox_head=dict(\n        type='SCRFDHead',\n        num_classes=1,\n        in_channels=32,\n        stacked_convs=2,\n        feat_channels=64,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        cls_reg_share=True,\n        strides_share=False,\n        dw_conv=True,\n        scale_mode=0,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            scales=[1, 2],\n            base_sizes=[12, 48, 192],\n            strides=[8, 16, 32]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=False,\n        reg_max=7,\n        loss_bbox=dict(type='DIoULoss', loss_weight=2.0),\n        use_kps=True,\n        loss_kps=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=0.1),\n        train_cfg=dict(\n            assigner=dict(type='ATSSAssigner', topk=9),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        test_cfg=dict(\n            nms_pre=-1,\n            min_bbox_size=0,\n            score_thr=0.02,\n            nms=dict(type='nms', iou_threshold=0.45),\n            max_per_img=-1)))\ntrain_cfg = dict(\n    assigner=dict(type='ATSSAssigner', topk=9),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=-1,\n    min_bbox_size=0,\n    score_thr=0.02,\n    nms=dict(type='nms', iou_threshold=0.45),\n    max_per_img=-1)\nepoch_multi = 1\nevaluation = dict(interval=5, metric='mAP')\nwork_dir = './work_dirs/scrfd_kps_zxs_mod'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "scrfd_kps_zxs_mod.py"}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 6e-05, "memory": 5740, "data_time": 11.71564, "loss_cls": 0.00395, "loss_bbox": 2.0508, "loss_kps": 0.64378, "loss": 2.69853, "time": 13.62605}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.00013, "memory": 5740, "data_time": 0.57377, "loss_cls": 0.06839, "loss_bbox": 1.77231, "loss_kps": 0.46752, "loss": 2.30821, "time": 2.83258}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.0002, "memory": 5740, "data_time": 1.49003, "loss_cls": 0.20247, "loss_bbox": 1.36752, "loss_kps": 0.36288, "loss": 1.93287, "time": 3.6462}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 0.00026, "memory": 5740, "data_time": 0.90406, "loss_cls": 0.25894, "loss_bbox": 1.19711, "loss_kps": 0.42306, "loss": 1.87911, "time": 2.94465}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00033, "memory": 5740, "data_time": 1.14423, "loss_cls": 0.34416, "loss_bbox": 1.08589, "loss_kps": 0.54275, "loss": 1.9728, "time": 3.28956}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.0004, "memory": 5740, "data_time": 8.05956, "loss_cls": 0.32234, "loss_bbox": 1.08915, "loss_kps": 0.51859, "loss": 1.93008, "time": 9.78735}
{"mode": "train", "epoch": 2, "iter": 40, "lr": 0.00047, "memory": 5740, "data_time": 0.90503, "loss_cls": 0.32924, "loss_bbox": 1.06922, "loss_kps": 0.53377, "loss": 1.93224, "time": 2.66763}
{"mode": "train", "epoch": 2, "iter": 60, "lr": 0.00053, "memory": 5740, "data_time": 2.02778, "loss_cls": 0.33623, "loss_bbox": 1.05158, "loss_kps": 0.5458, "loss": 1.93361, "time": 3.73085}
{"mode": "train", "epoch": 2, "iter": 80, "lr": 0.0006, "memory": 5744, "data_time": 0.94658, "loss_cls": 0.35035, "loss_bbox": 1.03632, "loss_kps": 0.55785, "loss": 1.94452, "time": 3.13238}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00067, "memory": 5744, "data_time": 0.78203, "loss_cls": 0.32837, "loss_bbox": 1.07525, "loss_kps": 0.48472, "loss": 1.88833, "time": 2.92023}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.00074, "memory": 5744, "data_time": 12.76059, "loss_cls": 0.33996, "loss_bbox": 1.04109, "loss_kps": 0.51738, "loss": 1.89843, "time": 14.65107}
{"mode": "train", "epoch": 3, "iter": 40, "lr": 0.0008, "memory": 5744, "data_time": 0.85878, "loss_cls": 0.34558, "loss_bbox": 1.03991, "loss_kps": 0.52152, "loss": 1.90701, "time": 2.80882}
{"mode": "train", "epoch": 3, "iter": 60, "lr": 0.00087, "memory": 5744, "data_time": 0.906, "loss_cls": 0.34023, "loss_bbox": 1.03906, "loss_kps": 0.51857, "loss": 1.89786, "time": 2.98519}
{"mode": "train", "epoch": 3, "iter": 80, "lr": 0.00094, "memory": 5744, "data_time": 0.53451, "loss_cls": 0.34829, "loss_bbox": 1.01845, "loss_kps": 0.52309, "loss": 1.88982, "time": 2.44273}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.001, "memory": 5744, "data_time": 0.58079, "loss_cls": 0.37003, "loss_bbox": 0.96661, "loss_kps": 0.55365, "loss": 1.89029, "time": 2.32229}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.001, "memory": 5744, "data_time": 14.49236, "loss_cls": 0.34647, "loss_bbox": 1.005, "loss_kps": 0.49982, "loss": 1.85129, "time": 16.83713}
{"mode": "train", "epoch": 4, "iter": 40, "lr": 0.001, "memory": 5755, "data_time": 0.76142, "loss_cls": 0.35587, "loss_bbox": 0.95209, "loss_kps": 0.52256, "loss": 1.83051, "time": 2.65149}
{"mode": "train", "epoch": 4, "iter": 60, "lr": 0.001, "memory": 5755, "data_time": 0.62969, "loss_cls": 0.37418, "loss_bbox": 0.94116, "loss_kps": 0.52231, "loss": 1.83764, "time": 2.38528}
{"mode": "train", "epoch": 4, "iter": 80, "lr": 0.001, "memory": 5755, "data_time": 1.67476, "loss_cls": 0.36538, "loss_bbox": 0.92212, "loss_kps": 0.48212, "loss": 1.76963, "time": 3.44964}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.001, "memory": 5755, "data_time": 1.00081, "loss_cls": 0.34954, "loss_bbox": 0.93746, "loss_kps": 0.45835, "loss": 1.74534, "time": 2.55819}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.001, "memory": 5755, "data_time": 14.36242, "loss_cls": 0.35426, "loss_bbox": 0.90765, "loss_kps": 0.4475, "loss": 1.70942, "time": 16.06393}
{"mode": "train", "epoch": 5, "iter": 40, "lr": 0.001, "memory": 5755, "data_time": 1.08216, "loss_cls": 0.36083, "loss_bbox": 0.86341, "loss_kps": 0.4577, "loss": 1.68195, "time": 3.03789}
{"mode": "train", "epoch": 5, "iter": 60, "lr": 0.001, "memory": 5755, "data_time": 1.33745, "loss_cls": 0.36581, "loss_bbox": 0.83084, "loss_kps": 0.45609, "loss": 1.65274, "time": 3.70189}
{"mode": "train", "epoch": 5, "iter": 80, "lr": 0.001, "memory": 5755, "data_time": 0.46183, "loss_cls": 0.36264, "loss_bbox": 0.83729, "loss_kps": 0.42325, "loss": 1.62318, "time": 2.29601}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.001, "memory": 5797, "data_time": 0.40234, "loss_cls": 0.33767, "loss_bbox": 0.8736, "loss_kps": 0.40541, "loss": 1.61667, "time": 1.95172}
