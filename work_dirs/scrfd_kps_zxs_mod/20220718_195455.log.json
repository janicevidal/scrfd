{"env_info": "sys.platform: linux\nPython: 3.7.8 (default, Apr 14 2021, 11:08:37) [GCC 6.3.0 20170516]\nCUDA available: True\nGPU 0: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.1.TC455_06.29069683_0\nGCC: gcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\nPyTorch: 1.8.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.1+cu111\nOpenCV: 4.5.1\nMMCV: 1.2.6\nMMCV Compiler: GCC 6.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.7.0+29db161", "config": "optimizer = dict(type='AdamW', lr=0.001)\noptimizer_config = dict(grad_clip=None)\nlr_mult = 2\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.001,\n    step=[110, 136])\ntotal_epochs = 160\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=20,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'RetinaFaceDataset'\ndata_root = 'data/retinaface/'\ntrain_root = 'data/retinaface/train/'\nval_root = 'data/retinaface/val/'\nimg_norm_cfg = dict(\n    mean=[127.5, 127.5, 127.5], std=[128.0, 128.0, 128.0], to_rgb=True)\ndata = dict(\n    samples_per_gpu=128,\n    workers_per_gpu=8,\n    train=dict(\n        type='RetinaFaceDataset',\n        ann_file='/mnt/zhangxs/retinaface/train/labelv2.txt',\n        img_prefix='/mnt/zhangxs/retinaface/train/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n            dict(\n                type='RandomSquareCrop',\n                crop_choice=[0.3, 0.45, 0.6, 0.8, 1.0]),\n            dict(type='Resize', img_scale=(320, 320), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='PhotoMetricDistortion',\n                brightness_delta=32,\n                contrast_range=(0.5, 1.5),\n                saturation_range=(0.5, 1.5),\n                hue_delta=18),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_keypointss'\n                ])\n        ]),\n    val=dict(\n        type='RetinaFaceDataset',\n        ann_file='/mnt/zhangxs/retinaface/val/labelv2.txt',\n        img_prefix='/mnt/zhangxs/retinaface/val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(320, 320),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(320, 320), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='RetinaFaceDataset',\n        ann_file='/mnt/zhangxs/retinaface/val/labelv2.txt',\n        img_prefix='/mnt/zhangxs/retinaface/val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(320, 320),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(320, 320), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='SCRFD',\n    backbone=dict(\n        type='SandNet',\n        block_cfg=dict(midchannel=[32, 32, 32], depth=[3, 5, 3])),\n    neck=dict(\n        type='GhostPAN',\n        in_channels=[96, 128, 128],\n        out_channels=32,\n        kernel_size=3,\n        num_extra_level=0,\n        use_depthwise=True,\n        activation='ReLU',\n        upsample_cfg=dict(scale_factor=2, mode='nearest')),\n    bbox_head=dict(\n        type='SCRFDHead',\n        num_classes=1,\n        in_channels=32,\n        stacked_convs=2,\n        feat_channels=64,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        cls_reg_share=True,\n        strides_share=False,\n        dw_conv=True,\n        scale_mode=0,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            scales=[1, 2],\n            base_sizes=[12, 48, 192],\n            strides=[8, 16, 32]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=False,\n        reg_max=7,\n        loss_bbox=dict(type='DIoULoss', loss_weight=2.0),\n        use_kps=True,\n        loss_kps=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=0.1),\n        train_cfg=dict(\n            assigner=dict(type='ATSSAssigner', topk=9),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        test_cfg=dict(\n            nms_pre=-1,\n            min_bbox_size=0,\n            score_thr=0.02,\n            nms=dict(type='nms', iou_threshold=0.45),\n            max_per_img=-1)))\ntrain_cfg = dict(\n    assigner=dict(type='ATSSAssigner', topk=9),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=-1,\n    min_bbox_size=0,\n    score_thr=0.02,\n    nms=dict(type='nms', iou_threshold=0.45),\n    max_per_img=-1)\nepoch_multi = 1\nevaluation = dict(interval=5, metric='mAP')\nwork_dir = './work_dirs/scrfd_kps_zxs_mod'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "scrfd_kps_zxs_mod.py"}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 2e-05, "memory": 5740, "data_time": 8.92346, "loss_cls": 0.00043, "loss_bbox": 2.07647, "loss_kps": 0.67449, "loss": 2.75139, "time": 10.61471}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 4e-05, "memory": 5740, "data_time": 0.53527, "loss_cls": 0.00504, "loss_bbox": 2.03898, "loss_kps": 0.56684, "loss": 2.61087, "time": 2.14761}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 6e-05, "memory": 5740, "data_time": 0.87884, "loss_cls": 0.06454, "loss_bbox": 1.79461, "loss_kps": 0.47269, "loss": 2.33184, "time": 2.73313}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 8e-05, "memory": 5740, "data_time": 0.45106, "loss_cls": 0.18035, "loss_bbox": 1.46957, "loss_kps": 0.43021, "loss": 2.08013, "time": 2.43963}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 5740, "data_time": 0.6406, "loss_cls": 0.2358, "loss_bbox": 1.28335, "loss_kps": 0.43105, "loss": 1.9502, "time": 2.19815}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.00012, "memory": 5759, "data_time": 11.23895, "loss_cls": 0.27239, "loss_bbox": 1.18779, "loss_kps": 0.44645, "loss": 1.90662, "time": 13.10548}
{"mode": "train", "epoch": 2, "iter": 40, "lr": 0.00014, "memory": 5759, "data_time": 1.40155, "loss_cls": 0.31276, "loss_bbox": 1.11027, "loss_kps": 0.50972, "loss": 1.93275, "time": 3.20283}
{"mode": "train", "epoch": 2, "iter": 60, "lr": 0.00016, "memory": 5759, "data_time": 0.50222, "loss_cls": 0.33334, "loss_bbox": 1.06999, "loss_kps": 0.55332, "loss": 1.95665, "time": 2.65691}
